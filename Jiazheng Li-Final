import pandas as pd
import math
import re
import random

class product():
    '''
    simulate the product making procedure
    '''
    cost1 = 0.02
    cost2 = 0.04
    cost3 = 0.03
    perfect_cost = 27 * 27 * 55 * math.pi / 3 * cost1 + 56 * 56 * 6 * cost2 + 58 * 58 * 6 * cost3

    @staticmethod
    def cone_cost(r, h):
        '''
        calculate the cost of the first part
        :param r: the radius of the cone
        :param h: the height of the cone
        :return:  the money used by cost per cubic mm and the volume
        >>> product.cone_cost(27, 55)
        839.7477163045518
        '''
        return r * r * h * math.pi / 3 * product.cost1

    @staticmethod
    def cube1_cost(a):
        '''
        calculate the cost of the second part
        :param a: the side length of a cube
        :return: the money used by cost per square mm and the surface area
        >>> product.cube1_cost(56)
        752.64
        '''
        return a * a * 6 * product.cost2

    @staticmethod
    def cube2_cost(a):
        '''
        calculate the cost of the third part
        :param a: the side length of a cube
        :return: the money used by cost per square mm and the surface area
        >>> product.cube2_cost(58)
        605.52
        '''
        return a * a * 6 * product.cost3

    @staticmethod
    def making() -> list:
        '''
        simulate the procedure of making one product
        :return: the first element of the list is successfully making the product or not marked as 0 or 1
        the second is the cost of the procedure regardless successfully making or not
        '''
        r = random.gauss(27, 0.45)
        h = random.gauss(55, 0.92)
        costA = product.cone_cost(r, h)
        if (r > 29 or r < 25) or (h > 57 or h < 52):
            return (0, costA)
        a1 = random.gauss(56, 1)
        costB = product.cube1_cost(a1)
        if (a1 > 58.5 or a1 < 53.5) or (a1 > (r * 2 + 2)) or (a1 > (h + 3.5)) or (a1 < r * 2 or a1 < h):
            return (0, costA + costB)
        a2 = random.gauss(58, 1.4)
        costC = product.cube2_cost(a2)
        if (a2 > 62 or a2 < 54) or (a2 > (a1 + 6)) or a2 < a1:
            return (0, costA + costB + costC)
        else:
            return (1, costA + costB + costC)

    @staticmethod
    def success_probability():
        '''
        calculate the approximate probability of successfully making a product
        :return: the calculated probability
        >>> p = product.success_probability()
        >>> 28 > p > 25
        True
        '''
        good_products = 0
        total = 0
        for i in range(100):
            for j in range(10000):
                # one_product = product.making()
                good_products = good_products + product.making()[0]
            total = total + good_products
            good_products = 0
        return total/10000

    @staticmethod
    def producing(budget):
        '''
        knowing the budget, calculate the number of products made during the procedure
        :param budget: the amount of the budget the user has
        :return: the number of products
        >>> n = product.producing(50000)
        >>> 6.5 < n < 8.5
        True
        '''
        number = 0
        total_number = 0
        for i in range(100):
            one_budget = budget
            while one_budget > product.perfect_cost:
                one_product = product.making()
                number = number + one_product[0]
                one_budget = one_budget - one_product[1]
            total_number = total_number + number
            number = 0
        number = total_number / 100
        return number

    # @staticmethod
    # def num_by_budget

if __name__ == "__main__":
    print(product.perfect_cost)
    # print(product.success_probability())
    print(product.producing(50000))